name: Auto Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  auto-release:
    # chore:、docs:、ci:で始まるコミットや[skip release]を含むコミットは除外
    if: |
      !startsWith(github.event.head_commit.message, 'chore:') && 
      !startsWith(github.event.head_commit.message, 'docs:') &&
      !startsWith(github.event.head_commit.message, 'ci:') &&
      !contains(github.event.head_commit.message, '[skip release]') &&
      !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest tag and determine next version
        id: version
        run: |
          # 最新のタグを取得
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # コミットメッセージを取得
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"
          
          # セマンティックバージョニングで次のバージョンを計算
          if [[ "$COMMIT_MSG" =~ ^feat(\(.+\))?!: ]] || [[ "$COMMIT_MSG" =~ BREAKING[[:space:]]CHANGE ]]; then
            # Major version bump for breaking changes
            NEXT_VERSION=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{printf "v%d.0.0", $1+1}')
            RELEASE_TYPE="major"
          elif [[ "$COMMIT_MSG" =~ ^feat(\(.+\))?: ]]; then
            # Minor version bump for new features
            NEXT_VERSION=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{printf "v%d.%d.0", $1, $2+1}')
            RELEASE_TYPE="minor"
          else
            # Patch version bump for everything else (fix, refactor, etc.)
            NEXT_VERSION=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{printf "v%d.%d.%d", $1, $2, $3+1}')
            RELEASE_TYPE="patch"
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION ($RELEASE_TYPE)"

      - name: Update version in code
        run: |
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          echo "Updating version to: $NEXT_VERSION"
          
          # cmd/root.goのバージョンを更新
          sed -i "s/var version = \".*\"/var version = \"$NEXT_VERSION\"/" cmd/root.go
          
          # 変更を確認
          grep "var version" cmd/root.go

      - name: Commit version update
        run: |
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          RELEASE_TYPE="${{ steps.version.outputs.release_type }}"
          
          git add cmd/root.go
          git commit -m "chore: bump version to $NEXT_VERSION [$RELEASE_TYPE] [skip ci]"
          git push origin main

      - name: Create and push tag
        run: |
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          echo "Creating tag: $NEXT_VERSION"
          
          git tag $NEXT_VERSION
          git push origin $NEXT_VERSION

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          RELEASE_TYPE="${{ steps.version.outputs.release_type }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          echo "## 🚀 Auto Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $NEXT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: $RELEASE_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger Commit**: $COMMIT_MSG" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/$NEXT_VERSION" >> $GITHUB_STEP_SUMMARY 
